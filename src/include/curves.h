/*
 *  the curves recommended in NIST
 */

#ifndef CURVES_H 
#define CURVES_H

#include <stdint.h>
#include <stdio.h>

/* Curve selection options. */
#define secp128r1 16
#define secp192r1 24
#define secp256r1 32
#define secp384r1 48

#define ECC_CURVE secp128r1

#define ERROR(info) fprintf(stdout, "[%s:%d]%s\n    %s\n", __FILE__, \
                __LINE__, __func__, info) 

#ifndef ECC_CURVE
    #define ECC_CURVE secp256r1
#endif

#if (ECC_CURVE != secp128r1 && ECC_CURVE != secp192r1 && ECC_CURVE != secp256r1 && ECC_CURVE != secp384r1)
    #error "Must define ECC_CURVE to one of the available curves"
#endif

#define ECC_BYTES ECC_CURVE

#ifdef __cplusplus
extern "C"
{
#endif

#define NUM_ECC_DIGITS (ECC_BYTES/4)

typedef struct EccPoint
{
    uint32_t x[NUM_ECC_DIGITS];
    uint32_t y[NUM_ECC_DIGITS];
} EccPoint;

#define CONCAT1(a, b) a##b
#define CONCAT(a, b) CONCAT1(a, b)

#define Curve_P_16 {0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFD}
#define Curve_P_24 {0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFE, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF}
#define Curve_P_32 {0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x00000000, 0x00000000, 0x00000000, 0x00000001, 0xFFFFFFFF}
#define Curve_P_48 {0xFFFFFFFF, 0x00000000, 0x00000000, 0xFFFFFFFF, 0xFFFFFFFE, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF}

#define Curve_A_16 {0xFFFFFFFC, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFD}
#define Curve_A_24 {0xFFFFFFFC, 0xFFFFFFFF, 0xFFFFFFFE, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF}
#define Curve_A_32 {0xFFFFFFFC, 0xFFFFFFFF, 0xFFFFFFFF, 0x00000000, 0x00000000, 0x00000000, 0x00000001, 0xFFFFFFFF}
#define Curve_A_48 {0xFFFFFFFC, 0x00000000, 0x00000000, 0xFFFFFFFF, 0xFFFFFFFE, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF}

#define Curve_B_16 {0x2CEE5ED3, 0xD824993C, 0x1079F43D, 0xE87579C1}
#define Curve_B_24 {0xC146B9B1, 0xFEB8DEEC, 0x72243049, 0x0FA7E9AB, 0xE59C80E7, 0x64210519}
#define Curve_B_32 {0x27d2604b, 0x3bce3c3e, 0xcc53b0f6, 0x651d06b0, 0x769886bc, 0xb3ebbd55, 0xaa3a93e7, 0x5ac635d8}
#define Curve_B_48 {0xD3EC2AEF, 0x2A85C8ED, 0x8A2ED19D, 0xC656398D, 0x5013875A, 0x0314088F, 0xFE814112, 0x181D9C6E, 0xE3F82D19, 0x988E056B, 0xE23EE7E4, 0xB3312FA7}

#define Curve_G_16 { \
    {0xA52C5B86, 0x0C28607C, 0x8B899B2D, 0x161FF752}, \
    {0xDDED7A83, 0xC02DA292, 0x5BAFEB13, 0xCF5AC839}}

#define Curve_G_24 { \
    {0x82FF1012, 0xF4FF0AFD, 0x43A18800, 0x7CBF20EB, 0xB03090F6, 0x188DA80E}, \
    {0x1E794811, 0x73F977A1, 0x6B24CDD5, 0x631011ED, 0xFFC8DA78, 0x07192B95}}
    
#define Curve_G_32 { \
    {0xd898c296, 0xf4a13945, 0x2deb33a0, 0x77037d81, 0x63a440f2, 0xf8bce6e5, 0xe12c4247, 0x6b17d1f2}, \
    {0x37bf51f5, 0xcbb64068, 0x6b315ece, 0x2bce3357, 0x7c0f9e16, 0x8ee7eb4a, 0xfe1a7f9b, 0x4fe342e2}}

#define Curve_G_48 { \
    {0x72760AB7, 0x3A545E38, 0xBF55296C, 0x5502F25D, 0x82542A38, 0x59F741E0, 0x8BA79B98, 0x6E1D3B62, 0xF320AD74, 0x8EB1C71E, 0xBE8B0537, 0xAA87CA22}, \
    {0x90EA0E5F, 0x7A431D7C, 0x1D7E819D, 0x0A60B1CE, 0xB5F0B8C0, 0xE9DA3113, 0x289A147C, 0xF8F41DBD, 0x9292DC29, 0x5D9E98BF, 0x96262C6F, 0x3617DE4A}}

#define Curve_nG_16 {\
    {{0x00000000, 0x00000000, 0x00000000, 0x00000000},{0x00000000, 0x00000000, 0x00000000, 0x00000000}},\
    {{0xA52C5B86, 0x0C28607C, 0x8B899B2D, 0x161FF752},{0xDDED7A83, 0xC02DA292, 0x5BAFEB13, 0xCF5AC839}},\
    {{0xe753a97e, 0x199db84b, 0xb92171db, 0x8151a0c6},{0x275b7e95, 0x838395a9, 0x9455caae, 0x03d85355}},\
    {{0x8a304b3b, 0xaa423b62, 0x42942f23, 0x0ad632f5},{0x9bcdc41f, 0x51e4b467, 0x21c4e788, 0x7aa67ee4}},\
    {{0xbdd2647f, 0xecb6495f, 0x4aae409d, 0x47487e91},{0x70a198d3, 0x4783239f, 0x04c56ae3, 0x4e67a674}},\
    {{0xb5d3e53f, 0x35493632, 0x22bb217e, 0xe147e5d4},{0x8e740757, 0x92945183, 0x1e03170a, 0x85563e32}},\
    {{0xd2247fef, 0x6e6d3b61, 0xbf7670b7, 0x624bcc28},{0xba856b06, 0x8bb52f92, 0x957b12f9, 0x092c2a43}},\
    {{0x40d215f2, 0xde75bd23, 0x5d70a474, 0x70416bb1},{0x1a4687be, 0x7cee5c84, 0xefb356c5, 0xe4361e1e}},\
    {{0x17fdb254, 0xd5dfae67, 0x73350c39, 0x0ee66827},{0x991e966a, 0x5d17d982, 0x799aa191, 0x3209fff0}},\
    {{0x4fdfdb5a, 0xdeef94ef, 0x57882f6a, 0x0c732ae9},{0xbdaac16a, 0xdab9b6ef, 0x461b9be0, 0x5f832d3a}},\
    {{0x030aefb8, 0x4fdc5981, 0x4ea04a0c, 0x87d40d44},{0x0ac3b392, 0xc943bcff, 0x1dced733, 0x2a8216ca}},\
    {{0xd038c403, 0x7b1211e4, 0x95f27451, 0x3d25c5ff},{0x943cadff, 0xccc591b4, 0xc4db8304, 0x9bbe6f5e}},\
    {{0x869d85bf, 0xddd32956, 0x77016729, 0xfc0b81a3},{0xdf0ad4d1, 0x924d993a, 0x04d023de, 0xb21c3be3}},\
    {{0x1bc9b763, 0xd78146d4, 0xf7c57edc, 0x4833eb39},{0x7a2db394, 0x53c381ab, 0xb8b0d760, 0x3419061f}},\
    {{0xec5ce2cf, 0xfa6544ac, 0x4fc95c0f, 0x3e228a9a},{0x2757da3b, 0x5a09e570, 0xccdbb8f1, 0xcdfe484e}},\
    {{0x27ef4f07, 0xb8013e29, 0x12b9ff49, 0xa0b1eb75},{0xbe3b9e77, 0x76c5607d, 0x28a6e0ce, 0x49a0ac05}},\
}

#define Curve_nG_24 {\
    {   {0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000},  \
        {0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000}}, \            
    {   {0x82FF1012, 0xF4FF0AFD, 0x43A18800, 0x7CBF20EB, 0xB03090F6, 0x188DA80E},  \
        {0x1E794811, 0x73F977A1, 0x6B24CDD5, 0x631011ED, 0xFFC8DA78, 0x07192B95}},\
    {   {0x6982A888, 0x29A70FB1, 0x1588A3F6, 0xD3553463, 0x28783F2A, 0xDAFEBF58},  \
        {0x5C7E93AB, 0x59331AFA, 0x141B868F, 0x46B27BBC, 0x993DA0FA, 0xDD6BDA0D}},\
    {   {0xCBB263DA, 0xDFD0D359, 0x1FB2B9AA, 0xDCD28320, 0x57599E6E, 0x76E32A25},  \
        {0x0CFD05FD, 0xF3B54366, 0xD121D49E, 0xAA62E0FE, 0x72BA4520, 0x782C37E3}},\
    {   {0x7084E4BA, 0xA4FE4664, 0x374729D7, 0xB0015703, 0x297CC378, 0x35433907},  \
        {0x1DB3BE32, 0x25389B31, 0x776CD4F1, 0x1EA3ACB0, 0xF2135C30, 0xA2649984}},\
    {   {0xDD7FF590, 0x590118EB, 0x300E1605, 0x3E078D9C, 0x40049B18, 0x10BB8E98},  \
        {0x3CCEAEA1, 0x312B7254, 0xE62762BE, 0xADC9F836, 0x476F917B, 0x31361008}},\
    {   {0x93D23F2A, 0x0ACE8ECB, 0xAA667832, 0x98BF5BD1, 0x431F9AC3, 0xA37ABC6C},  \
        {0x10BC68F0, 0x081F7C57, 0x1BBDA90E, 0xFED7040A, 0xC99908DB, 0x851B3CAE}},\            
    {   {0x7011FCFD, 0x5DE37F00, 0x3060EDCE, 0x60F92324, 0x75DDCD76, 0x8DA75A1F},  \
        {0x6409FFB5, 0xD4B702F9, 0xFDB3C01D, 0x18240DB8, 0x6860B354, 0x57CB5FCF}},\
    {   {0x3397EDDE, 0x4B597788, 0xCC14899D, 0x14771993, 0x1ECCE920, 0x2FA1F92D},  \
        {0x9738F6C0, 0xF2DD8A8E, 0x78EF733F, 0x273B8B59, 0xF78B7214, 0xA338AFDE}},\
    {   {0xB980388F, 0x1D9D375A, 0xA8D27C9E, 0x4E9E8F2B, 0x8B1CABB7, 0x818A4D30} , \
        {0x76C8E739, 0x30EA5421, 0xBB457CDF, 0x7C292F7C, 0x208D87CD, 0x01D1AA5E}},\
    {   {0xD1FE9D85, 0x859BB150, 0xD9238842, 0xD1AEDE2B, 0xF99E3E96, 0xAA7C4F9E} , \
        {0x491397B0, 0x60EB5EB2, 0xB2F48594, 0x01EE3658, 0x47EDC629, 0x3212A365}},\
    {   {0x0628A2AA, 0x28094037, 0x4D22B652, 0x1844F716, 0xEB76324F, 0x1C995995},  \
        {0x1AAA9C04, 0xB34CB861, 0x00FA77BD, 0x029F5564, 0x37E9EB73, 0xEF1765CE}},\
    {   {0x67EEB8AB, 0x8FCCDCDA, 0xF8C9E7B2, 0xCA013877, 0x3D456D0E, 0x1061343F},  \
        {0x0B27293F, 0x681EAC02, 0xE7A48648, 0x98FEF8E3, 0x2EA6B037, 0x5A064CAA}},\            
    {   {0x3C4A090A, 0x04144A36, 0x051E4EA0, 0x2F68821E, 0xD33EFB9F, 0x112AF141},  \
        {0x432B1C1E, 0x7F10A094, 0xE081E09E, 0x2A2C1726, 0xFC5293F7, 0x6E0CBE3B}},\
    {   {0xDE1081C1, 0xDEE08843, 0xF7C64E05, 0x591746B3, 0x46EBC93B, 0x13B93106},  \
        {0xE186E6B4, 0x4FBACA95, 0xEC41A1EC, 0x15F3B427, 0xB44142DD, 0x1EDCEA63}},\
    {   {0x7578B1E7, 0x36DE4A9E, 0xB5414DE7, 0xBA3546B2, 0x3B56B633, 0x8C9595E6},  \
        {0xD98FC7B1, 0xAD7537CD, 0x3AA566B6, 0x7CF38799, 0x934F00C1, 0x266B762A}}}

#define Curve_N_16 {0x9038A115, 0x75A30D1B, 0x00000000, 0xFFFFFFFE}
#define Curve_N_24 {0xB4D22831, 0x146BC9B1, 0x99DEF836, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF}
#define Curve_N_32 {0xFC632551, 0xF3B9CAC2, 0xA7179E84, 0xBCE6FAAD, 0xFFFFFFFF, 0xFFFFFFFF, 0x00000000, 0xFFFFFFFF}
#define Curve_N_48 {0xCCC52973, 0xECEC196A, 0x48B0A77A, 0x581A0DB2, 0xF4372DDF, 0xC7634D81, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF}

static uint32_t curve_p[NUM_ECC_DIGITS] = CONCAT(Curve_P_, ECC_CURVE);
static uint32_t curve_b[NUM_ECC_DIGITS] = CONCAT(Curve_B_, ECC_CURVE);
static EccPoint curve_G = CONCAT(Curve_G_, ECC_CURVE);
static EccPoint curve_nG[16] = CONCAT(Curve_nG_, ECC_CURVE);
static uint32_t curve_n[NUM_ECC_DIGITS] = CONCAT(Curve_N_, ECC_CURVE);
static uint32_t curve_a[NUM_ECC_DIGITS] = CONCAT(Curve_A_, ECC_CURVE);

#ifdef __cplusplus
} /* end of extern "C" */
#endif

#endif